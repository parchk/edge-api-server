/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/cnrancher/edge-api-server/pkg/apis/edgeapi.cattle.io/v1alpha1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type DeviceTemplateRevisionHandler func(string, *v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error)

type DeviceTemplateRevisionController interface {
	generic.ControllerMeta
	DeviceTemplateRevisionClient

	OnChange(ctx context.Context, name string, sync DeviceTemplateRevisionHandler)
	OnRemove(ctx context.Context, name string, sync DeviceTemplateRevisionHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() DeviceTemplateRevisionCache
}

type DeviceTemplateRevisionClient interface {
	Create(*v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error)
	Update(*v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error)
	UpdateStatus(*v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.DeviceTemplateRevision, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.DeviceTemplateRevisionList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.DeviceTemplateRevision, err error)
}

type DeviceTemplateRevisionCache interface {
	Get(namespace, name string) (*v1alpha1.DeviceTemplateRevision, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.DeviceTemplateRevision, error)

	AddIndexer(indexName string, indexer DeviceTemplateRevisionIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.DeviceTemplateRevision, error)
}

type DeviceTemplateRevisionIndexer func(obj *v1alpha1.DeviceTemplateRevision) ([]string, error)

type deviceTemplateRevisionController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewDeviceTemplateRevisionController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) DeviceTemplateRevisionController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &deviceTemplateRevisionController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromDeviceTemplateRevisionHandlerToHandler(sync DeviceTemplateRevisionHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.DeviceTemplateRevision
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.DeviceTemplateRevision))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *deviceTemplateRevisionController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.DeviceTemplateRevision))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateDeviceTemplateRevisionDeepCopyOnChange(client DeviceTemplateRevisionClient, obj *v1alpha1.DeviceTemplateRevision, handler func(obj *v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error)) (*v1alpha1.DeviceTemplateRevision, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *deviceTemplateRevisionController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *deviceTemplateRevisionController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *deviceTemplateRevisionController) OnChange(ctx context.Context, name string, sync DeviceTemplateRevisionHandler) {
	c.AddGenericHandler(ctx, name, FromDeviceTemplateRevisionHandlerToHandler(sync))
}

func (c *deviceTemplateRevisionController) OnRemove(ctx context.Context, name string, sync DeviceTemplateRevisionHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromDeviceTemplateRevisionHandlerToHandler(sync)))
}

func (c *deviceTemplateRevisionController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *deviceTemplateRevisionController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *deviceTemplateRevisionController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *deviceTemplateRevisionController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *deviceTemplateRevisionController) Cache() DeviceTemplateRevisionCache {
	return &deviceTemplateRevisionCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *deviceTemplateRevisionController) Create(obj *v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error) {
	result := &v1alpha1.DeviceTemplateRevision{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *deviceTemplateRevisionController) Update(obj *v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error) {
	result := &v1alpha1.DeviceTemplateRevision{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *deviceTemplateRevisionController) UpdateStatus(obj *v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error) {
	result := &v1alpha1.DeviceTemplateRevision{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *deviceTemplateRevisionController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *deviceTemplateRevisionController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.DeviceTemplateRevision, error) {
	result := &v1alpha1.DeviceTemplateRevision{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *deviceTemplateRevisionController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.DeviceTemplateRevisionList, error) {
	result := &v1alpha1.DeviceTemplateRevisionList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *deviceTemplateRevisionController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *deviceTemplateRevisionController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.DeviceTemplateRevision, error) {
	result := &v1alpha1.DeviceTemplateRevision{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type deviceTemplateRevisionCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *deviceTemplateRevisionCache) Get(namespace, name string) (*v1alpha1.DeviceTemplateRevision, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1alpha1.DeviceTemplateRevision), nil
}

func (c *deviceTemplateRevisionCache) List(namespace string, selector labels.Selector) (ret []*v1alpha1.DeviceTemplateRevision, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceTemplateRevision))
	})

	return ret, err
}

func (c *deviceTemplateRevisionCache) AddIndexer(indexName string, indexer DeviceTemplateRevisionIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.DeviceTemplateRevision))
		},
	}))
}

func (c *deviceTemplateRevisionCache) GetByIndex(indexName, key string) (result []*v1alpha1.DeviceTemplateRevision, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.DeviceTemplateRevision, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.DeviceTemplateRevision))
	}
	return result, nil
}

type DeviceTemplateRevisionStatusHandler func(obj *v1alpha1.DeviceTemplateRevision, status v1alpha1.DeviceTemplateRevisionStatus) (v1alpha1.DeviceTemplateRevisionStatus, error)

type DeviceTemplateRevisionGeneratingHandler func(obj *v1alpha1.DeviceTemplateRevision, status v1alpha1.DeviceTemplateRevisionStatus) ([]runtime.Object, v1alpha1.DeviceTemplateRevisionStatus, error)

func RegisterDeviceTemplateRevisionStatusHandler(ctx context.Context, controller DeviceTemplateRevisionController, condition condition.Cond, name string, handler DeviceTemplateRevisionStatusHandler) {
	statusHandler := &deviceTemplateRevisionStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromDeviceTemplateRevisionHandlerToHandler(statusHandler.sync))
}

func RegisterDeviceTemplateRevisionGeneratingHandler(ctx context.Context, controller DeviceTemplateRevisionController, apply apply.Apply,
	condition condition.Cond, name string, handler DeviceTemplateRevisionGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &deviceTemplateRevisionGeneratingHandler{
		DeviceTemplateRevisionGeneratingHandler: handler,
		apply:                                   apply,
		name:                                    name,
		gvk:                                     controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterDeviceTemplateRevisionStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type deviceTemplateRevisionStatusHandler struct {
	client    DeviceTemplateRevisionClient
	condition condition.Cond
	handler   DeviceTemplateRevisionStatusHandler
}

func (a *deviceTemplateRevisionStatusHandler) sync(key string, obj *v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type deviceTemplateRevisionGeneratingHandler struct {
	DeviceTemplateRevisionGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *deviceTemplateRevisionGeneratingHandler) Remove(key string, obj *v1alpha1.DeviceTemplateRevision) (*v1alpha1.DeviceTemplateRevision, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.DeviceTemplateRevision{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *deviceTemplateRevisionGeneratingHandler) Handle(obj *v1alpha1.DeviceTemplateRevision, status v1alpha1.DeviceTemplateRevisionStatus) (v1alpha1.DeviceTemplateRevisionStatus, error) {
	objs, newStatus, err := a.DeviceTemplateRevisionGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
